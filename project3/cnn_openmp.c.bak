#include <stdio.h>
#include <stdlib.h> 
#include <stdint.h>
#include <time.h>
#include <omp.h>


#define BMP_HEADER_SIZE 54  // Standard BMP header size (for BMP images)

// Declare global variables to store image data
unsigned char *image = NULL;
unsigned char *output_image = NULL;
int width, height, stride;

// Define a 3x3 convolution kernel for image sharpening
int kernel[3][3] = {
    { 0, -1, 0 },   // Top row: only attenuates the pixel above
    { -1, 5, -1 },  // Middle row: emphasizes center pixel and attenuates horizontal neighbors
    { 0, -1, 0 }    // Bottom row: only attenuates the pixel below
};

// Function to read a BMP image file
unsigned char* read_bmp(const char *filename) {
    printf("\n[Task 1: Reading BMP Image] - Started\n");
    
    FILE *file = fopen(filename, "rb");
    if (!file) {
        printf("Error: Could not open file %s\n", filename);
        return NULL;
    }
    
    unsigned char *header = (unsigned char *)malloc(BMP_HEADER_SIZE);
    fread(header, 1, BMP_HEADER_SIZE, file);
    
    width = *(int*)&header[18];
    height = *(int*)&header[22];
    stride = (width * 3 + 3) & (~3);
    
    image = (unsigned char *)malloc(height * stride);
    fread(image, sizeof(unsigned char), height * stride, file);
    fclose(file);
    
    printf("[Task 1: Reading BMP Image] - Completed\n");
    return header;
}

// Function to apply convolution filter with RGB matrix approach to a specific row
void process_row(int row) {
    // Create arrays for each color channel of this row
    int *red_values = (int *)malloc(width * sizeof(int));
    int *green_values = (int *)malloc(width * sizeof(int));
    int *blue_values = (int *)malloc(width * sizeof(int));
    
    if (!red_values || !green_values || !blue_values) {
        printf("Error: Memory allocation failed for row matrices\n");
        exit(1);
    }

    // Process each color channel separately
    for (int color = 0; color < 3; color++) {
        // Select which array to use based on color channel
        int *current_values;
        if (color == 0) current_values = red_values;
        else if (color == 1) current_values = green_values;
        else current_values = blue_values;
        
        // Process each pixel in this row
        for (int j = 0; j < width; j++) {
            int sum = 0;
            
            // Apply the 3x3 convolution kernel
            for (int ki = -1; ki <= 1; ki++) {
                for (int kj = -1; kj <= 1; kj++) {
                    int img_row = row + ki;
                    int col = j + kj;
                    
                    // Handle boundary conditions with edge clamping
                    if (img_row >= 0 && img_row < height && col >= 0 && col < width) {
                        unsigned char pixel_value = image[img_row * stride + col * 3 + color];
                        sum += pixel_value * kernel[ki + 1][kj + 1];
                    }
                    else {
                        // For out-of-bounds pixels, use the value of the closest valid pixel
                        int clamped_row = img_row < 0 ? 0 : (img_row >= height ? height - 1 : img_row);
                        int clamped_col = col < 0 ? 0 : (col >= width ? width - 1 : col);
                        
                        unsigned char pixel_value = image[clamped_row * stride + clamped_col * 3 + color];
                        sum += pixel_value * kernel[ki + 1][kj + 1];
                    }
                }
            }
            
            // Store the convolution result in the appropriate array
            current_values[j] = sum;
        }
    }
    
    // Apply ReLU activation and store results in output image
    for (int j = 0; j < width; j++) {
        // Get values from each channel array
        int red_val = red_values[j];
        int green_val = green_values[j];
        int blue_val = blue_values[j];
        
        // Apply ReLU activation (clip values to 0-255 range)
        red_val = red_val < 0 ? 0 : (red_val > 255 ? 255 : red_val);
        green_val = green_val < 0 ? 0 : (green_val > 255 ? 255 : green_val);
        blue_val = blue_val < 0 ? 0 : (blue_val > 255 ? 255 : blue_val);
        
        // Store the results in the output image
        output_image[row * stride + j * 3] = (unsigned char)red_val;       // Red
        output_image[row * stride + j * 3 + 1] = (unsigned char)green_val; // Green
        output_image[row * stride + j * 3 + 2] = (unsigned char)blue_val;  // Blue
    }
    
    // Free the allocated memory
    free(red_values);
    free(green_values);
    free(blue_values);
}

// Function to apply the filter using OpenMP parallelism
void apply_filter_parallel(int num_threads) {
    printf("\n[Task the 2: Processing Image with OpenMP] - Using %d threads\n", num_threads);
    
    // Set the number of threads to use
    omp_set_num_threads(num_threads);
    
    // Dynamic schedule allows for better load balancing
    #pragma omp parallel for schedule(dynamic, 16)
    for (int i = 0; i < height; i++) {
        // Process each row in parallel
        process_row(i);
        
        // Optional: periodically report progress
        #pragma omp critical
        {
            if (i % 50 == 0 || i == height - 1) {
                printf("   [Thread %d] - Processed row %d\n", omp_get_thread_num(), i);
            }
        }
    }
    
    printf("[Task 2: Processing Image] - Completed\n");
}

// Function to save the processed image as a BMP file
void save_bmp(const char *filename, unsigned char *header) {
    printf("\n[Task 3: Saving Processed BMP Image] - Started\n");

    FILE *file = fopen(filename, "wb");
    fwrite(header, 1, BMP_HEADER_SIZE, file);
    fwrite(output_image, sizeof(unsigned char), height * stride, file);
    fclose(file);
    
    printf("[Task 3: Saving Processed BMP Image] - Completed\n");
}

// Main function - entry point of the program
int main(int argc, char *argv[]) {
    double start_time, end_time;
    unsigned char *header = NULL;
    int num_threads;
    
    // Check if command line arguments are provided
    if (argc < 2 || argc > 3) {
        printf("Usage: %s <input BMP file> [number of threads]\n", argv[0]);
        return 1;
    }
    
    // Get the input filename from command line arguments
    const char *input_filename = argv[1];
    
    // Set the number of threads (use command line or default to max available)
    if (argc == 3) {
        num_threads = atoi(argv[2]);
    } else {
        num_threads = omp_get_max_threads();
    }
    
    // Create a string for the output filename
    char output_filename[100];
    sprintf(output_filename, "output_openmp_%d_threads.bmp", num_threads);
    
    printf("\n[Program Start] OpenMP Image Processing Begins with %d threads\n", num_threads);
    
    // Read the BMP image
    header = read_bmp(input_filename);
    if (!header) {
        printf("Error: Could not read input file\n");
        return 1;
    }
    
    // Allocate memory for the output image
    output_image = (unsigned char *)malloc(height * stride);
    if (!output_image) {
        printf("Error: Could not allocate memory for output image\n");
        free(header);
        free(image);
        return 1;
    }
    
    // Start the timer
    start_time = omp_get_wtime();
    
    // Apply the filter in parallel
    apply_filter_parallel(num_threads);
    
    // Stop the timer
    end_time = omp_get_wtime();
    
    // Print the execution time
    printf("\n[Task 4: Execution Time] - %f seconds\n", end_time - start_time);
    
    // Save the processed image
    save_bmp(output_filename, header);
    
    // Log the timing results to a file for performance analysis
    FILE *log_file = fopen("openmp_timing_results.txt", "a");
    fprintf(log_file, "%d %f\n", num_threads, end_time - start_time);
    fclose(log_file);
    
    printf("\n[Program End] OpenMP Image Processing Completed\n");
    
    // Free allocated memory
    free(header);
    free(image);
    free(output_image);
    
    return 0;
}